package me.bait.exploitsx.util;

import me.bait.exploitsx.ExploitsX;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.HashMap;

public class ViolationUtils {
    HashMap<Player, Integer> vlMap = new HashMap<>();
    HashMap<Player, Boolean> vlActive = new HashMap<>();

    public void addVls(Player player, int vls) {
        if (!vlMap.containsKey(player)) {
            vlMap.put(player, vls);
        } else {
            vlMap.replace(player, vls(player) + 1);
        }
    }

    public void begin() {
        Bukkit.getScheduler().runTaskTimer(ExploitsX.getPlugin(), getBegin()
                , ExploitsX.getPlugin().getConfig().getLong("vlremovedelaystartupby"),
                ExploitsX.getPlugin().getConfig().getLong("vlremovedelay"));
    }

    public void begin(int speed) {
        Bukkit.getScheduler().runTaskTimer(ExploitsX.getPlugin(),
                getBegin(), ExploitsX.getPlugin().getConfig().getLong("vlremovedelaystartupby"),
                ExploitsX.getPlugin().getConfig().getLong("vlremovedelay") * speed);
    }

    private Runnable getBegin() {
        return () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if (vlMap.containsKey(player) && vlActive.containsKey(player)) {
                    if (getVls(player) > 0) {
                        vlMap.replace(player, getVls(player) - 1);
                    } else {
                        vlMap.remove(player);
                        vlActive.remove(player);
                    }
                }
            }
        };
    }

    public int getVls(Player player) {
        int vls = 0;

        if (vlMap.containsKey(player)) {
            vls = vlMap.get(player);
        }

        return vls;
    }

    public void removeVL(final Player player) {
        if (vlActive.containsKey(player)) {
            vlActive.replace(player, true);
        } else {
            vlActive.put(player, true);
        }
    }

    public void resetVls(Player player) {
        vlMap.remove(player);
        vlActive.remove(player);
    }

    public boolean vlMapContainsPlayer(Player player) {
        return vlMap.containsKey(player);
    }

    public int vls(Player player) {
        return vlMap.get(player);
    }
}
