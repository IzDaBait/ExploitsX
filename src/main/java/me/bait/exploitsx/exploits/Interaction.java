package me.bait.exploitsx.exploits;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.util.API;
import me.bait.exploitsx.util.ConfigHelper;
import me.bait.exploitsx.util.ViolationUtils;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.player.PlayerShearEntityEvent;
import org.bukkit.scheduler.BukkitRunnable;

public class Interaction implements Listener {

    static ViolationUtils interactMan = new ViolationUtils();
    static int intcancel = ConfigHelper.getInt("interact-cancel");
    static int intkick = ConfigHelper.getInt("interact-kick");
    static boolean eint = ConfigHelper.getBoolean("interact-limit", false);

    public static void begin() {
        interactMan.begin(4);
        reload();
    }

    public static void reload() {
        intcancel = ConfigHelper.getInt("interact-cancel");
        intkick = ConfigHelper.getInt("interact-kick");
        eint = ConfigHelper.getBoolean("interact-limit", false);
    }

    @EventHandler
    public void onInteract(PlayerInteractEntityEvent event) {
        if (!eint)
            return;
        if (interactMan.getVls(event.getPlayer()) >= intkick) {
            event.setCancelled(true);
        }
        pe(event.getPlayer());
    }

    @EventHandler
    public void onInteract(PlayerInteractEvent event) {
        if (!eint)
            return;
        if (interactMan.getVls(event.getPlayer()) >= intcancel) {
            if (event.getAction() == Action.RIGHT_CLICK_BLOCK
                    && API.isTile(event.getClickedBlock().getType().toString())) {
                event.setCancelled(true);
                pe(event.getPlayer());
            }
        } else {
            if ((int) Math.round(Math.random()) == 1)
                pe(event.getPlayer());
        }
    }

    @EventHandler
    public void onLeave(PlayerQuitEvent event) {
        if (!eint)
            return;
        interactMan.resetVls(event.getPlayer());
    }

    @EventHandler
    public void onShear(PlayerShearEntityEvent event) {
        if (!eint)
            return;
        if (interactMan.getVls(event.getPlayer()) >= intkick) {
            event.setCancelled(true);
        }
        pe(event.getPlayer());
    }

    public void pe(Player player) {
        if (!eint)
            return;
        interactMan.addVls(player, 1);
        interactMan.removeVL(player);

        new BukkitRunnable() {
            @Override
            public void run() {
                if (player.isOnline()) {
                    if (interactMan.vlMapContainsPlayer(player)) {
                        if (interactMan.getVls(player) > 1) {
                            interactMan.removeVL(player);
                        }
                        if (interactMan.getVls(player) < 2) {
                            interactMan.resetVls(player);
                        }
                    }
                } else {
                    interactMan.resetVls(player);
                }
            }
        }.runTaskLater(ExploitsX.getPlugin(), 100L);

        if (interactMan.getVls(player) >= intkick) {
            API.kickPlayer(player, API.getPrefix() + " > &6You are interacting too fast, sorry ): ("
                    + interactMan.getVls(player) + "vls)");

            API.alertMessage(API.getPrefix() + "&c " + player.getName() + "> &r&6Has been kicked for fastinteract ("
                    + interactMan.getVls(player) + "vls)");

            interactMan.resetVls(player);
        }
    }
}
