package me.bait.exploitsx.gameplay;

import me.bait.exploitsx.util.API;
import me.bait.exploitsx.util.ConfigHelper;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryView;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.inventory.meta.ItemMeta;

public class GrindStone implements Listener {
    static boolean check = ConfigHelper.getBoolean("containers.grindstone", true);
    static boolean debug = ConfigHelper.getBoolean("debug");

    public static void reload() {
        check = ConfigHelper.getBoolean("containers.grindstone", true);
        debug = ConfigHelper.getBoolean("debug");
    }

    public boolean check(Player p) {
        int set = 0;
        PlayerInventory i = p.getInventory();
        ItemStack right = i.getItemInMainHand();
        ItemStack left = i.getItemInOffHand();
        if (right.hasItemMeta() && right.getItemMeta().hasEnchants()) {
            for (Enchantment enchantment : right.getItemMeta().getEnchants().keySet()) {
                if (right.getEnchantmentLevel(enchantment) > 50 || right.getEnchantmentLevel(enchantment) < 0) {
                    right.removeEnchantment(enchantment);
                    right.addEnchantment(enchantment, enchantment.getMaxLevel());
                    set = 1;
                }
            }
        }
        if (left.hasItemMeta() && left.getItemMeta().hasEnchants()) {
            for (Enchantment enchantment : left.getItemMeta().getEnchants().keySet()) {
                if (left.getEnchantmentLevel(enchantment) > 10 || left.getEnchantmentLevel(enchantment) < 0) {
                    left.removeEnchantment(enchantment);
                    left.addEnchantment(enchantment, enchantment.getMaxLevel());
                    set = 1;
                }
            }
        }
        for (ItemStack item : i.getContents()) {
            if (!(item == null || item.getEnchantments().isEmpty() || !item.hasItemMeta())) {
                ItemMeta meta = item.getItemMeta();
                if (!meta.getEnchants().isEmpty()) {
                    for (Enchantment enchantment : meta.getEnchants().keySet()) {
                        if (item.getEnchantmentLevel(enchantment) > 10 || item.getEnchantmentLevel(enchantment) < 0) {
                            item.removeEnchantment(enchantment);
                            item.addEnchantment(enchantment, enchantment.getMaxLevel());
                            set = 1;
                        }
                    }
                }
                item.setItemMeta(meta);
            }
        }
        if (set == 1) {
            API.println(API.getPrefix() + "Removed extreme enchant from player '" + p.getName() + "'");
            return true;
        }
        return false;
    }

    @EventHandler
    public void onClick(InventoryClickEvent event) {
        if (!check || event.getClickedInventory() == null) return;
        InventoryType e = event.getClickedInventory().getType();
        if (debug) API.println(API.getPrefix() + event.getWhoClicked().getName() + " clicked in a " + e);
        if (e.toString().toLowerCase().contains("grind")) {
            if (check((Player) event.getWhoClicked())) {
                if (debug)
                    API.println(API.getPrefix() + event.getWhoClicked().getName() + " failed a " + e + " click check");
                event.setCancelled(true);
            }
            int set = 0;
            ItemStack i = event.getCursor();
            if (!(i == null || i.getEnchantments().isEmpty() || !i.hasItemMeta())) {
                ItemMeta meta = i.getItemMeta();
                if (!meta.getEnchants().isEmpty()) {
                    for (Enchantment enchantment : meta.getEnchants().keySet()) {
                        if (i.getEnchantmentLevel(enchantment) > 10 || i.getEnchantmentLevel(enchantment) < 0) {
                            i.removeEnchantment(enchantment);
                            i.addEnchantment(enchantment, enchantment.getMaxLevel());
                            set = 1;
                        }
                    }
                }
                i.setItemMeta(meta);
            }
            ItemStack f = event.getCurrentItem();
            if (!(f == null || f.getEnchantments().isEmpty() || !f.hasItemMeta())) {
                ItemMeta meta = f.getItemMeta();
                if (!meta.getEnchants().isEmpty()) {
                    for (Enchantment enchantment : meta.getEnchants().keySet()) {
                        if (f.getEnchantmentLevel(enchantment) > 10 || f.getEnchantmentLevel(enchantment) < 0) {
                            f.removeEnchantment(enchantment);
                            f.addEnchantment(enchantment, enchantment.getMaxLevel());
                            set = 1;
                        }
                    }
                }
                f.setItemMeta(meta);
            }
            if (set == 1) {
                if (debug)
                    API.println(API.getPrefix() + event.getWhoClicked().getName() + " failed a " + e + " click check");
                event.setCancelled(true);
            }
            Inventory h = event.getClickedInventory();
            if (h == null) return;
            for (int x = 0; x <= 3; x++) {
                if (h.getItem(x) == null || !h.getItem(x).hasItemMeta()) return;
                ItemStack y = h.getItem(x);
                if (!(y == null || y.getEnchantments().isEmpty() || !y.hasItemMeta())) {
                    ItemMeta meta = y.getItemMeta();
                    if (!meta.getEnchants().isEmpty()) {
                        for (Enchantment enchantment : meta.getEnchants().keySet()) {
                            if (y.getEnchantmentLevel(enchantment) > 10 || y.getEnchantmentLevel(enchantment) < 0) {
                                y.removeEnchantment(enchantment);
                                y.addEnchantment(enchantment, enchantment.getMaxLevel());
                                if (debug)
                                    API.println(API.getPrefix() + event.getWhoClicked().getName() + " failed a " + e + " click check");
                                event.setCancelled(true);
                                event.getWhoClicked().closeInventory();
                            }
                        }
                    }
                    y.setItemMeta(meta);
                    event.getClickedInventory().setItem(x, y);
                }
            }
        }
    }

    @EventHandler
    public void onPickup(PlayerAttemptPickupItemEvent event) {
        if (!check || event.getItem() == null) return;
        if (event.getPlayer().getOpenInventory().getType().toString().toLowerCase().contains("grind")) {
            InventoryView e = event.getPlayer().getOpenInventory();
            for (int i = 0; i <= e.getType().getDefaultSize(); i++) {
                if (e.getItem(i) == null || !e.getItem(i).hasItemMeta()) return;
                ItemStack f = e.getItem(i);
                if (!(f == null || f.getEnchantments().isEmpty() || !f.hasItemMeta())) {
                    ItemMeta meta = f.getItemMeta();
                    if (!meta.getEnchants().isEmpty()) {
                        for (Enchantment enchantment : meta.getEnchants().keySet()) {
                            if (f.getEnchantmentLevel(enchantment) > 10 || f.getEnchantmentLevel(enchantment) < 0) {
                                f.removeEnchantment(enchantment);
                                f.addEnchantment(enchantment, enchantment.getMaxLevel());
                                event.setCancelled(true);
                                event.getPlayer().closeInventory();
                            }
                        }
                    }
                    f.setItemMeta(meta);
                }
            }
        }
    }

    @EventHandler
    public void onInteract(PlayerInteractEvent event) {
        PlayerInventory f = event.getPlayer().getInventory();
        ItemStack i = f.getItemInMainHand();
        ItemStack l = f.getItemInOffHand();
        if (i != null)
            if (i.getType().toString().toLowerCase().contains("spawn") && !i.getType().toString().toLowerCase().contains("spawner")) {
                i.setType(Material.STONE);
                event.setCancelled(true);
            }
        if (l != null)
            if (l.getType().toString().toLowerCase().contains("spawn") && !i.getType().toString().toLowerCase().contains("spawner")) {
                i.setType(Material.STONE);
                event.setCancelled(true);
            }
        if (!check) return;
        if (event.getClickedBlock() == null || event.getClickedBlock().getType() == Material.AIR) return;
        String e = event.getClickedBlock().getType().toString().toLowerCase();
        if (debug) API.println(API.getPrefix() + event.getPlayer().getName() + " clicked a " + e);
        if (e.contains("grind")) {
            if (check(event.getPlayer())) {
                event.setCancelled(true);
                event.getPlayer().closeInventory();
            }
        }
    }
}
