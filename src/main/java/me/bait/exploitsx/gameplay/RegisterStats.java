package me.bait.exploitsx.gameplay;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.Messages;
import me.bait.exploitsx.util.API;
import me.bait.exploitsx.util.IPCrypt;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegisterStats implements Listener {

    private static final String defColor = "d";
    public static final Map<Player, Long> kill = new HashMap<>();
    public static final Map<Player, Long> death = new HashMap<>();

    public static final Map<Player, Long> places = new HashMap<>();

    public static final Map<Player, Long> breaks = new HashMap<>();
    public static final Map<Player, Long> time = new HashMap<>();
    public static final Map<Player, Long> messages = new HashMap<>();

    public static final Map<Player, Long> travel = new HashMap<>();
    public static final Map<Player, String> colors = new HashMap<>();

    Boolean eLog = ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.119"));

    public static void color(CommandSender p, String s) {
        if (p instanceof Player) {
            colors.put((Player) p, s);
        } else {
            p.sendMessage(API.getPrefix() + ChatColor.RED + "Only players can run this command!");
        }

    }

    public static void count() {
        double tps = me.bait.exploitsx.util.TPS.getTPS();
        for (Player p : Bukkit.getOnlinePlayers()) {
            if (time.containsKey(p)) {
                Long out = time.get(p);
                double timed = out.doubleValue();
                double calc = (100 / tps);
                timed = timed + calc;
                long v1 = Math.round(timed);
                time.put(p, v1);
            }
        }
    }

    public static void onChat(Player p) {
        if (messages.containsKey(p)) {
            Long message = messages.get(p);
            message++;
            messages.put(p, message);
        }
    }

    public static void onDisable() {
        new Thread(() -> {
            if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.0"))) {
                ExploitsX.getPlugin().getServer()
                        .broadcastMessage(ChatColor.DARK_RED + Messages.getString("RS.1") + ChatColor.AQUA
                                + Messages.getString("RS.2")
                                + ExploitsX.getPlugin().getDescription().getVersion() + ChatColor.DARK_RED
                                + Messages.getString("RS.3"));
            }

            for (Player p : Bukkit.getOnlinePlayers()) {
                checkedReset(p);

                if (!RegisterStats.colors.containsKey(p)) {
                    RegisterStats.colors.put(p, defColor);
                }

                String uuid = p.getUniqueId().toString();
                String firstThreeChars = uuid.substring(0, 3);
                File f = new File(Messages.getString("RS.4") + uuid + Messages.getString("RS.5"));
                YamlConfiguration yaml = YamlConfiguration.loadConfiguration(f);
                setData(p, yaml);

                try {
                    File dir = new File(Messages.getString("RS.6") + firstThreeChars);
                    if (!dir.exists())
                        dir.mkdirs();
                    File file = new File(Messages.getString("RS.7") + firstThreeChars + Messages.getString("RS.8")
                            + uuid + Messages.getString("RS.9"));
                    if (file.exists()) {
                        if (file.delete()) {
                            if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.10"))) {
                                API.println(Messages.getString("RS.11") + uuid + Messages.getString("RS.12"));
                            }
                        } else {
                            API.println(Messages.getString("RS.13") + firstThreeChars + Messages.getString("RS.14")
                                    + uuid + Messages.getString("RS.15"));
                        }
                    }

                    yaml.save(Messages.getString("RS.16") + firstThreeChars + Messages.getString("RS.17") + uuid
                            + Messages.getString("RS.18"));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                removePlayer(p);
            }
        }).start();
    }

    public static void onEnable() {
        Bukkit.getScheduler().scheduleSyncRepeatingTask(ExploitsX.getPlugin(), RegisterStats::count, 0L, 100L);

        new Thread(() -> {
            if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.19"))) {
                ExploitsX.getPlugin().getServer()
                        .broadcastMessage(ChatColor.DARK_RED + Messages.getString("RS.20") + ChatColor.AQUA
                                + Messages.getString("RS.21")
                                + ExploitsX.getPlugin().getDescription().getVersion() + ChatColor.DARK_RED
                                + Messages.getString("RS.22"));
            }

            for (Player p : Bukkit.getOnlinePlayers()) {
                String uuid = p.getUniqueId().toString();
                String firstThreeChars = uuid.substring(0, 3);
                File dir = new File(Messages.getString("RS.23") + firstThreeChars);

                if (!dir.exists())
                    dir.mkdirs();

                File f = new File(Messages.getString("RS.24") + firstThreeChars + Messages.getString("RS.25") + uuid
                        + Messages.getString("RS.26"));

                if (!f.exists()) {
                    try {
                        f.getParentFile().mkdirs();
                        YamlConfiguration yaml = new YamlConfiguration();
                        yaml.createSection(Messages.getString("RS.27"));
                        yaml.createSection("data.color");
                        yaml.createSection(Messages.getString("RS.28"));
                        yaml.addDefault(Messages.getString("RS.29"), 0);
                        yaml.addDefault(Messages.getString("RS.30"), 0);
                        yaml.addDefault(Messages.getString("RS.31"), 0);
                        yaml.addDefault(Messages.getString("RS.32"), 0);
                        yaml.addDefault(Messages.getString("RS.33"), 0);
                        yaml.addDefault(Messages.getString("RS.34"), 0);
                        yaml.addDefault(Messages.getString("RS.35"), 0);
                        yaml.addDefault(Messages.getString("RS.36"), Messages.getString("RS.37"));
                        yaml.set("data.color", defColor);
                        yaml.set(Messages.getString("RS.38"), 0);
                        yaml.set(Messages.getString("RS.39"), 0);
                        yaml.set(Messages.getString("RS.40"), 0);
                        yaml.set(Messages.getString("RS.41"), 0);
                        yaml.set(Messages.getString("RS.42"), 0);
                        yaml.set(Messages.getString("RS.43"), 0);
                        yaml.set(Messages.getString("RS.44"), 0);
                        yaml.set(Messages.getString("RS.45"), p.getName());
                        yaml.save(Messages.getString("RS.46") + firstThreeChars + Messages.getString("RS.47") + uuid
                                + Messages.getString("RS.48"));
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }

                    resetStats(p);
                    RegisterStats.colors.put(p, defColor);
                } else {
                    YamlConfiguration save = new YamlConfiguration();

                    try {
                        save.load(f);
                    } catch (IOException | InvalidConfigurationException er) {
                        er.printStackTrace();
                    }

                    if (save.contains("data.color")) {
                        colors.put(p, save.getString("data.color"));
                    } else {
                        colors.put(p, defColor);
                    }

                    kill.put(p, save.getLong(Messages.getString("RS.49")));
                    death.put(p, save.getLong(Messages.getString("RS.50")));
                    time.put(p, save.getLong(Messages.getString("RS.51")));
                    places.put(p, save.getLong(Messages.getString("RS.52")));
                    breaks.put(p, save.getLong(Messages.getString("RS.53")));
                    messages.put(p, save.getLong(Messages.getString("RS.54")));
                    travel.put(p, save.getLong(Messages.getString("RS.55")));
                }
            }
        }).start();
    }

    private static void resetStats(Player p) {
        RegisterStats.kill.put(p, 0L);
        RegisterStats.time.put(p, 0L);
        RegisterStats.death.put(p, 0L);
        RegisterStats.places.put(p, 0L);
        RegisterStats.breaks.put(p, 0L);
        RegisterStats.messages.put(p, 0L);
        RegisterStats.travel.put(p, 0L);
    }

    public static void removePlayer(Player p) {
        RegisterStats.kill.remove(p);
        RegisterStats.time.remove(p);
        RegisterStats.death.remove(p);
        RegisterStats.places.remove(p);
        RegisterStats.breaks.remove(p);
        RegisterStats.messages.remove(p);
        RegisterStats.travel.remove(p);
    }

    public static void setData(Player p, YamlConfiguration yaml) {
        yaml.createSection(Messages.getString("RS.56"));
        yaml.createSection(Messages.getString("RS.57"));
        yaml.addDefault("data.color", defColor);
        yaml.addDefault(Messages.getString("RS.58"), 0);
        yaml.addDefault(Messages.getString("RS.59"), 0);
        yaml.addDefault(Messages.getString("RS.60"), 0);
        yaml.addDefault(Messages.getString("RS.61"), 0);
        yaml.addDefault(Messages.getString("RS.62"), 0);
        yaml.addDefault(Messages.getString("RS.63"), 0);
        yaml.addDefault(Messages.getString("RS.64"), 0);
        yaml.addDefault(Messages.getString("RS.65"), Messages.getString("RS.66"));
        yaml.set("data.color", colors.get(p));
        yaml.set(Messages.getString("RS.67"), kill.get(p));
        yaml.set(Messages.getString("RS.68"), death.get(p));
        yaml.set(Messages.getString("RS.69"), time.get(p));
        yaml.set(Messages.getString("RS.70"), places.get(p));
        yaml.set(Messages.getString("RS.71"), breaks.get(p));
        yaml.set(Messages.getString("RS.72"), messages.get(p));
        yaml.set(Messages.getString("RS.73"), travel.get(p));
        yaml.set(Messages.getString("RS.74"), p.getName());
    }

    public static boolean onCommand(Player sender, String message) {
        String[] args = message.split(" ");

        if (message.contains(Messages.getString("RS.75"))) {
            Player subject = ExploitsX.getPlugin().getServer().getPlayer(sender.getName());

            if (args.length == 1)
                subject = ExploitsX.getPlugin().getServer().getPlayer(args[0]);

            if (subject == null)
                return false;

            sender.sendMessage(
                    ChatColor.GREEN + Messages.getString("RS.78") + ChatColor.AQUA + subject.getName()
                            + ChatColor.GREEN + Messages.getString("RS.79"));
            sender.sendMessage(
                    ChatColor.AQUA + Messages.getString("RS.80") + ChatColor.GREEN + RegisterStats.kill.get(subject));
            sender.sendMessage(
                    ChatColor.AQUA + Messages.getString("RS.81") + ChatColor.GREEN + RegisterStats.death.get(subject));
            sender.sendMessage(
                    ChatColor.AQUA + Messages.getString("RS.82") + ChatColor.GREEN + RegisterStats.breaks.get(subject));
            sender.sendMessage(
                    ChatColor.AQUA + Messages.getString("RS.83") + ChatColor.GREEN + RegisterStats.places.get(subject));
            sender.sendMessage(ChatColor.AQUA + Messages.getString("RS.84") + ChatColor.GREEN
                    + RegisterStats.messages.get(subject));

            if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.85"))) {
                sender.sendMessage(ChatColor.AQUA + Messages.getString("RS.86") + ChatColor.GREEN
                        + RegisterStats.travel.get(subject));
            }

            sender.sendMessage(ChatColor.AQUA + Messages.getString("RS.87") + ChatColor.GREEN
                    + API.getFormattedInterval(RegisterStats.time.get(subject)));
            sender.sendMessage(ChatColor.GREEN + Messages.getString("RS.88"));
            return true;
        }
        return false;
    }

    @EventHandler
    public void onBreak(BlockBreakEvent e) {
        if (e.getPlayer() == null)
            return;

        Player p = e.getPlayer();

        if (breaks.containsKey(p)) {
            Long move = breaks.get(p);
            move++;
            breaks.put(p, move);
        }
    }

    @EventHandler
    public void onDeath(PlayerDeathEvent e) {
        int cancel = 0;

        Player k = e.getEntity().getKiller();
        Player d = e.getEntity();

        if (d == null || d.getType() != EntityType.PLAYER)
            return;

        if (k == null || k.getType() != EntityType.PLAYER) {
            List<Entity> near = d.getNearbyEntities(10.0D, 10.0D, 10.0D);
            Long deaths = death.get(d.getPlayer());

            deaths++;
            death.put(d.getPlayer(), deaths);

            for (Entity entity : near) {
                if (cancel == 1)
                    break;
                if (entity.getType() == EntityType.PLAYER || entity instanceof Player) {
                    Player nearPlayer = (Player) entity;
                    if (nearPlayer.getName().equals(d.getPlayer().getName()))
                        return;
                    if (!death.containsKey(d.getPlayer()))
                        death.put(d.getPlayer(), 1L);
                    if (!kill.containsKey(nearPlayer))
                        kill.put(nearPlayer, 1L);
                    if (!death.containsKey(nearPlayer))
                        death.put(nearPlayer, 0L);
                    if (!kill.containsKey(d.getPlayer()))
                        kill.put(d.getPlayer(), 0L);
                    Long kills = kill.get(nearPlayer);
                    kills++;
                    kill.put(nearPlayer, kills);
                    cancel = 1;
                }
            }

            return;
        }

        if (!death.containsKey(d.getPlayer()))
            death.put(d.getPlayer(), 1L);
        if (!kill.containsKey(k.getPlayer()))
            kill.put(k.getPlayer(), 1L);
        if (!death.containsKey(k.getPlayer()))
            death.put(k.getPlayer(), 0L);
        if (!kill.containsKey(d.getPlayer()))
            kill.put(d.getPlayer(), 0L);

        Long kills = kill.get(k.getPlayer());
        Long deaths = death.get(d.getPlayer());

        kills++;
        deaths++;

        kill.put(k.getPlayer(), kills);
        death.put(d.getPlayer(), deaths);
    }

    @EventHandler
    public void onJoin(PlayerJoinEvent e) {
        new Thread(() -> {
            Player p = e.getPlayer();
            String uuid = p.getUniqueId().toString();
            String firstThreeChars = uuid.substring(0, 3);
            File dir = new File(Messages.getString("RS.89") + firstThreeChars);

            if (!dir.exists())
                dir.mkdirs();

            File f = new File(Messages.getString("RS.90") + firstThreeChars + Messages.getString("RS.91") + uuid
                    + Messages.getString("RS.92"));

            if (!f.exists()) {
                try {
                    f.getParentFile().mkdirs();
                    YamlConfiguration yaml = new YamlConfiguration();
                    setData(p, yaml);
                    yaml.save(Messages.getString("RS.93") + firstThreeChars + Messages.getString("RS.94") + uuid
                            + Messages.getString("RS.95"));
                } catch (IOException e1) {
                    e1.printStackTrace();
                }

                RegisterStats.colors.put(p, defColor);
                resetStats(p);
            } else {
                YamlConfiguration save = new YamlConfiguration();

                try {
                    save.load(f);
                } catch (IOException | InvalidConfigurationException er) {
                    er.printStackTrace();
                }

                if (save.contains("data.color")) {
                    colors.put(p, save.getString("data.color"));
                } else {
                    colors.put(p, defColor);
                }

                kill.put(p, save.getLong(Messages.getString("RS.96")));
                death.put(p, save.getLong(Messages.getString("RS.97")));
                time.put(p, save.getLong(Messages.getString("RS.98")));
                places.put(p, save.getLong(Messages.getString("RS.99")));
                breaks.put(p, save.getLong(Messages.getString("RS.100")));
                messages.put(p, save.getLong(Messages.getString("RS.101")));
                travel.put(p, save.getLong(Messages.getString("RS.102")));
            }
        }).start();
    }

    @EventHandler
    public void onLeave(PlayerQuitEvent e) {
        new Thread(() -> {
            Player p = e.getPlayer();
            if (!RegisterStats.colors.containsKey(p)) {
                RegisterStats.colors.put(p, defColor);
            }

            checkedReset(p);

            String uuid = p.getUniqueId().toString();
            String firstThreeChars = uuid.substring(0, 3);
            File f = new File(Messages.getString("RS.103") + firstThreeChars + Messages.getString("RS.104") + uuid
                    + Messages.getString("RS.105"));
            YamlConfiguration yaml = YamlConfiguration.loadConfiguration(f);
            setData(p, yaml);

            try {
                File dir = new File(Messages.getString("RS.106") + firstThreeChars);

                if (!dir.exists())
                    dir.mkdirs();

                File file = new File(Messages.getString("RS.107") + firstThreeChars + Messages.getString("RS.108")
                        + uuid + Messages.getString("RS.109"));

                if (file.exists()) {
                    if (file.delete()) {
                        if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.110"))) {
                            API.println(Messages.getString("RS.111") + uuid + Messages.getString("RS.112"));
                        }
                    } else {
                        API.println(
                                Messages.getString("RS.113") + firstThreeChars + Messages.getString("RS.114") + uuid
                                        + Messages.getString("RS.115"));
                    }
                }

                yaml.save(Messages.getString("RS.116") + firstThreeChars + Messages.getString("RS.117") + uuid
                        + Messages.getString("RS.118"));
            } catch (IOException e1) {
                e1.printStackTrace();
            }

            removePlayer(p);
            IPCrypt.quit(e.getPlayer());
        }).start();
    }

    private static void checkedReset(Player p) {
        if (!RegisterStats.death.containsKey(p)) {
            RegisterStats.death.put(p, 0L);
        }

        if (!RegisterStats.kill.containsKey(p)) {
            RegisterStats.kill.put(p, 0L);
        }

        if (!RegisterStats.time.containsKey(p)) {
            RegisterStats.time.put(p, 0L);
        }

        if (!RegisterStats.places.containsKey(p)) {
            RegisterStats.places.put(p, 0L);
        }

        if (!RegisterStats.breaks.containsKey(p)) {
            RegisterStats.breaks.put(p, 0L);
        }

        if (!RegisterStats.messages.containsKey(p)) {
            RegisterStats.messages.put(p, 0L);
        }

        if (!RegisterStats.travel.containsKey(p)) {
            RegisterStats.travel.put(p, 0L);
        }
    }

    @EventHandler
    public void onMove(PlayerMoveEvent e) {
        if (eLog) {
            Location to = e.getTo();
            Location from = e.getFrom();
            if (to.getBlockX() == from.getBlockX() && to.getBlockY() == from.getBlockY()
                    && to.getBlockZ() == from.getBlockZ()) {
                return;
            }
            Player p = e.getPlayer();
            if (travel.containsKey(p)) {
                Long move = travel.get(p);
                move++;
                travel.put(p, move);
            }
        }
    }

    @EventHandler
    public void onPlace(BlockPlaceEvent e) {
        if (e.getPlayer() == null)
            return;
        Player p = e.getPlayer();
        if (places.containsKey(p)) {
            Long move = places.get(p);
            move++;
            places.put(p, move);
        }
    }
}
