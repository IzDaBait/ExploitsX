package me.bait.exploitsx.chatco;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.gameplay.RegisterStats;
import me.bait.exploitsx.util.API;
import me.bait.exploitsx.util.ConfigHelper;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class Whispers implements Listener {
    private static final List<String> lastMessages = new ArrayList<String>();
    private static String sendformat = "To RECEIVER: ";
    private static String recieveformat = "SENDER whispers: ";
    private static boolean rewire = ConfigHelper.getBoolean("rewire-chatco", true);
    private static boolean replycommands = ConfigHelper.getBoolean("ChatCo.ReplyCommands", true);
    private static boolean whisperlog = ConfigHelper.getBoolean("ChatCo.WhisperLog");
    private static boolean whisperMonitoring = ConfigHelper.getBoolean("ChatCo.WhisperMonitoring", true);
    private static boolean ignoresEnabled = ConfigHelper.getBoolean("ChatCo.ignoreMessageEnabled", true);
    private static boolean disabledMessage = ConfigHelper.getBoolean("ChatCo.chatDisabledMessageEnabled", true);
    private static boolean newCommands = ConfigHelper.getBoolean("ChatCo.NewCommands", true);
    private static boolean ignoreMessage = ConfigHelper.getBoolean("ChatCo.ignoreMessageEnabled", true);
    public ExploitsX plugin;

    public Whispers(ExploitsX plugin) {
        this.plugin = plugin;
    }

    public static void reload() {
        sendformat = ConfigHelper.getString("ChatCo.WhisperFormat.Send");
        recieveformat = ConfigHelper.getString("ChatCo.WhisperFormat.Receive");
        rewire = ConfigHelper.getBoolean("rewire-chatco", true);
        replycommands = ConfigHelper.getBoolean("ChatCo.ReplyCommands", true);
        whisperlog = ConfigHelper.getBoolean("ChatCo.WhisperLog");
        whisperMonitoring = ConfigHelper.getBoolean("ChatCo.WhisperMonitoring", true);
        ignoresEnabled = ConfigHelper.getBoolean("ChatCo.ignoreMessageEnabled", true);
        disabledMessage = ConfigHelper.getBoolean("ChatCo.chatDisabledMessageEnabled", true);
        newCommands = ConfigHelper.getBoolean("ChatCo.NewCommands", true);
        ignoreMessage = ConfigHelper.getBoolean("ChatCo.ignoreMessageEnabled", true);
    }

    public String now() {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return sdf.format(cal.getTime());
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) throws IOException {
        if (!rewire)
            return;
        boolean doNotSend = false;
        boolean isIgnoring = false;
        String inputText = event.getMessage();
        String[] args = inputText.split(" ", 0);
        Player sender = event.getPlayer();
        if (replycommands && (args[0].equals("/r") || args[0].equals("/reply"))) {
            Player target = null;
            if (args.length == 1)
                sender.sendMessage("Usage: /r <message>");
            if (ChatCommandHandle.getCCPlayer(sender).getLastMessenger() != null)
                target = ChatCommandHandle.getCCPlayer(sender).getLastMessenger();
            if (target == null && (ChatCommandHandle.getCCPlayer(sender)).LastMessenger != null) {
                sender.sendMessage("The last person who whispered you("
                        + (ChatCommandHandle.getCCPlayer(sender)).LastMessenger + ") is offline.");
            } else if (target == null) {
                sender.sendMessage("You have received no whispers recently");
            } else {
                try {
                    if ((ChatCommandHandle.getCCPlayer(target)).tellsDisabled)
                        doNotSend = true;
                } catch (Exception ignored) {
                }
                if (ChatCommandHandle.checkForIgnores
                        && ChatCommandHandle.getCCPlayer(target).isIgnored(sender.getUniqueId().toString()))
                    isIgnoring = true;
                StringBuilder message = new StringBuilder();
                for (int z = 1; z < args.length; z++) {
                    if (z > 1)
                        message.append(" ");
                    message.append(args[z]);
                }
                String senderMessage = whisperFormat("sender", sender, target);
                String receiverMessage = whisperFormat("target", sender, target);
                String result = String.valueOf(String.valueOf(receiverMessage)) + message;
                sender.sendMessage(String.valueOf(String.valueOf(senderMessage)) + message);
                if (isIgnoring && ignoresEnabled)
                    sender.sendMessage(ChatColor.RED + target.getName()
                            + " is ignoring you.");
                if (doNotSend && disabledMessage)
                    sender.sendMessage(ChatColor.RED + target.getName()
                            + "'s chat is disabled.");
                if (!doNotSend && !isIgnoring) {
                    target.sendMessage(result);
                    ChatCommandHandle.getCCPlayer(target).setLastMessenger(sender);
                }
                if (doNotSend || isIgnoring)
                    inputText = "***WAS NOT SENT*** " + inputText;
                if (whisperlog)
                    whisperLog(inputText, sender.getName());
                if (whisperMonitoring)
                    API.alertMessageChatCo(API.getPrefix() + "&aChatCo: " + sender.getName() + " to " + target.getName() + ": " + inputText);
            }
            event.setCancelled(true);
        }
        if (newCommands) {
            if (inputText.toLowerCase().startsWith("/tell ") || inputText.toLowerCase().startsWith("/msg ")
                    || inputText.toLowerCase().startsWith("/t ") || inputText.toLowerCase().startsWith("/w ")
                    || inputText.toLowerCase().startsWith("/whisper ") || inputText.toLowerCase().startsWith("/message ") || inputText.toLowerCase().startsWith("/pm ")) {
                if (args.length == 1)
                    sender.sendMessage("Usage: /t <player> <message>");
                Player target = Bukkit.getPlayer(args[1]);
                if (target == null)
                    return;
                try {
                    if ((ChatCommandHandle.getCCPlayer(target)).tellsDisabled)
                        doNotSend = true;
                } catch (Exception ignored) {
                }
                if (ChatCommandHandle.checkForIgnores
                        && ChatCommandHandle.getCCPlayer(target).isIgnored(sender.getUniqueId().toString()))
                    isIgnoring = true;
                event.setCancelled(true);
                StringBuilder message = new StringBuilder();
                for (int z = 2; z < args.length; z++) {
                    if (z > 2)
                        message.append(" ");
                    message.append(args[z]);
                }
                String senderMessage = whisperFormat("sender", sender, target);
                String receiverMessage = whisperFormat("target", sender, target);
                String result = receiverMessage + message;
                sender.sendMessage(senderMessage + message);
                if (isIgnoring && ignoreMessage)
                    sender.sendMessage(ChatColor.RED + target.getName() + " is ignoring you.");
                if (doNotSend && disabledMessage)
                    sender.sendMessage(ChatColor.RED.toString() + target.getName() + "'s chat is disabled.");
                if (!doNotSend && !isIgnoring) {
                    target.sendMessage(result);
                    ChatCommandHandle.getCCPlayer(target).setLastMessenger(sender);
                }
                if (doNotSend || isIgnoring)
                    inputText = "***WAS NOT SENT*** " + inputText;
                if (whisperlog)
                    whisperLog(inputText, sender.getName());
                if (whisperMonitoring)
                    API.alertMessageChatCo(API.getPrefix() + "&aChatCo: " + sender.getName() + ": " + inputText);
            }
        } else {
            Player target = Bukkit.getPlayer(args[1]);
            if (target == null)
                return;
            if ((ChatCommandHandle.getCCPlayer(target)).tellsDisabled)
                doNotSend = true;
            if (ChatCommandHandle.checkForIgnores && ChatCommandHandle.getCCPlayer(target).isIgnored(sender.getUniqueId().toString()))
                isIgnoring = true;
            if (inputText.toLowerCase().startsWith("/tell ") || inputText.toLowerCase().startsWith("/w ")
                    || inputText.toLowerCase().startsWith("/msg ")) {
                event.setCancelled(true);
                StringBuilder message = new StringBuilder();
                for (int z = 2; z < args.length; z++) {
                    if (z > 2)
                        message.append(" ");
                    message.append(args[z]);
                }
                String senderMessage = whisperFormat("sender", sender, target);
                String receiverMessage = whisperFormat("target", sender, target);
                String result = receiverMessage + message;
                int y = 0;
                for (String compared : lastMessages) {
                    if (Similarity.getSimilarity(message.toString(), compared) >= 0.5) {
                        y++;
                    }
                }
                if (y > 3) return;
                sender.sendMessage(senderMessage + message);
                if (isIgnoring && ignoresEnabled)
                    sender.sendMessage(ChatColor.RED.toString() + target + " is ignoring you.");
                if (doNotSend && disabledMessage)
                    sender.sendMessage(ChatColor.RED.toString() + target + "'s chat is disabled.");
                if (!doNotSend && !isIgnoring) {
                    target.sendMessage(result);
                    ChatCommandHandle.getCCPlayer(target).setLastMessenger(sender);
                }
                if (doNotSend || isIgnoring)
                    inputText = "***WAS NOT SENT*** " + inputText;
                if (whisperlog)
                    whisperLog(inputText, sender.getName());
                if (whisperMonitoring)
                    API.alertMessageChatCo(API.getPrefix() + "&aChatCo: " + sender.getName() + ": " + inputText);
            }
        }
    }

    public String whisperFormat(String who, Player sender, Player target) {
        String data;

        if (who.equalsIgnoreCase("sender")) {
            data = "&" + RegisterStats.colors.get(sender) + sendformat;
        } else {
            data = "&" + RegisterStats.colors.get(target) + recieveformat;
        }

        data = ChatColor.translateAlternateColorCodes('&', data);
        data = data.replace("RECEIVER", target.getName());
        data = data.replace("SENDER", sender.getName());
        return data;
    }

    public void whisperLog(String text, String sender) {
        try {
            FileWriter fwo = new FileWriter(ChatCommandHandle.WhisperLog, true);
            BufferedWriter bwo = new BufferedWriter(fwo);
            bwo.write(now() + " " + sender + ": " + text);
            bwo.newLine();
            bwo.close();
        } catch (IOException ioexception) {
            ioexception.printStackTrace();
        }
    }
}
