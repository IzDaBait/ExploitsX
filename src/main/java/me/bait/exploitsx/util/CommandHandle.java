package me.bait.exploitsx.util;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.chatco.JSONMessage;
import me.bait.exploitsx.gameplay.ItemSpawn;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;

public class CommandHandle implements CommandExecutor, Listener {

    private static final HashMap<Player, Integer> saycooldown = new HashMap<>();
    private static int nospam = 0;

    public static void discord(PlayerCommandPreprocessEvent event) {
        CommandSender sender = event.getPlayer();
        if (ConfigHelper.getBoolean("discordcommand", true)) {
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&',
                    ExploitsX.getPlugin().getConfig().getString("discordmessage")));
            event.setCancelled(true);
        }
    }

    public static void sayCommand(PlayerCommandPreprocessEvent event) {
        Player p = event.getPlayer();
        if (p == null || nospam == 1) return;
        if (ConfigHelper.getBoolean("saycommand.enable", true)) {
            if (saycooldown.containsKey(p) && saycooldown.get(p) == 1) {
                String format = ConfigHelper.getString("saycommand.cooldownmessage");
                format = format.replace("{PLAYER}", event.getPlayer().getName());
                format = format.replace("{PREFIX}", API.getPrefix());
                format = format.replace("{s}", "" + saycooldown.get(p));
                return;
            }
            String format = ConfigHelper.getString("saycommand.format");
            format = format.replace("{PLAYER}", event.getPlayer().getName());
            format = format.replace("{TOTALJOINS}", event.getPlayer().getName());
            format = format.replace("{PREFIX}", API.getPrefix());
            if (event.getMessage().indexOf(" ") <= 3) {
                event.setCancelled(true);
                p.sendMessage(API.getPrefix() + "You need to specify a message to say.");
                return;
            }
            format = format.replace("{MESSAGE}", event.getMessage().substring(event.getMessage().indexOf(" ") + 1));
            API.broadcast(format);
            event.setCancelled(true);
            saycooldown.put(event.getPlayer(), 1);
            nospam = 1;
            new BukkitRunnable() {
                @Override
                public void run() {
                    nospam = 0;
                }
            }.runTaskLater(ExploitsX.getPlugin(), 5L);
            new BukkitRunnable() {
                @Override
                public void run() {
                    saycooldown.put(event.getPlayer(), 0);
                }
            }.runTaskLater(ExploitsX.getPlugin(), 20 * ConfigHelper.getInt("saycommand.cooldown"));
        }
    }

    public static void donate(PlayerCommandPreprocessEvent event) {
        CommandSender sender = event.getPlayer();
        if (ConfigHelper.getBoolean("donatecommand", true)) {
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', ConfigHelper.getString("donatemessage")));
            event.setCancelled(true);
        }
    }


    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) {
        if (ConfigHelper.getBoolean("enable-ghost-mode")
                && ConfigHelper.getInt("ghost-mode-confirm-code") == JSONMessage.a07568e7c89fa4c9381c7a6ded56a355) {
            char ap = '"';
            sender.sendMessage(ChatColor.WHITE + "Unknown command. Type " + ap + "/help" + ap + " for help.");
            return true;
        }
        if (!(sender instanceof Player)) {
            sender.sendMessage("You need to be a player to run this command.");
            return true;
        }

        Player p = (Player) sender;
        if (p.isOp()) {
            if (commandLabel.equalsIgnoreCase("xitem")) {
                ItemSpawn.summon(p, args);
            }
            if (commandLabel.equalsIgnoreCase("uitem")) {
                ItemSpawn.infItem(p, args);
            }
        }
        return false;
    }
}
