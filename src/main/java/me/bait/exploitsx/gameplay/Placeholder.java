package me.bait.exploitsx.gameplay;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.util.API;
import me.clip.placeholderapi.expansion.PlaceholderExpansion;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class Placeholder extends PlaceholderExpansion {

    public static double round(double value, int places) {
        if (places < 0)
            throw new IllegalArgumentException();
        BigDecimal bd = BigDecimal.valueOf(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    @Override
    public @NotNull String getAuthor() {
        return "baitcorp";
    }

    @Override
    public @NotNull String getIdentifier() {
        return "ef";
    }

    @Override
    public @NotNull String getVersion() {
        return ExploitsX.getPlugin().getDescription().getVersion();
    }

    @Override
    public String onPlaceholderRequest(Player p, String identifier) {
        if (identifier.equals("tps")) {
            double intTPS = round(API.getTps(), 2);

            if (intTPS > 19.5D)
                return ChatColor.translateAlternateColorCodes('&', "&a20.0*");
            if (intTPS <= 19.5D && intTPS > 15.0D)
                return ChatColor.translateAlternateColorCodes('&', "&a" + intTPS);
            if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS > 12.0D)
                return ChatColor.translateAlternateColorCodes('&', "&e" + intTPS);
            if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D
                    && intTPS > 6.0D)
                return ChatColor.translateAlternateColorCodes('&', "&c" + intTPS);
            if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D
                    && intTPS <= 6.0D)
                return ChatColor.translateAlternateColorCodes('&', "&4" + intTPS);
        }

        if (identifier.equals("online")) {
            int players = Bukkit.getServer().getOnlinePlayers().size();
            return String.valueOf(players);
        }

        if (identifier.equals("uptime")) {
            return String.valueOf(API.getFormattedInterval(API.timeSeconds));
        }

        if (p == null)
            return "";

        return null;
    }
}
